# -*- coding: utf-8 -*-
"""FullEdgeDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MDG766-g0GQ8_PHs_U-8BZzwvuItzOf_

#Canny edge detection:

> thresholding: reduce noise in the image (2 thresholding in canny operator)

# Laplacian Edge detection:
> full of noise is output, unclear image. yet its used only image transformation. transfer image to receiver (cant be hacked or understood when someone tries to hack!)

Adv: secure communication

# 0th order - Gausdsian Filter  (Best)
# 1st order - Sobel / Canny  (somewhat Better)
# 2nd order - Laplacian filter (noisy)
"""

import cv2

import numpy as np

from matplotlib import pyplot as plt

# Load sample image (you can replace 'sample_image.jpg' with your image path)

image_path = "/content/images.jpg"

img = cv2.imread(image_path, cv2.IMREAD_COLOR)

# Convert image to grayscale

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise

blurred_gray = cv2.GaussianBlur(gray, (3, 3), 0)

# Apply Sobel edge detection

edges_x_sobel = cv2.Sobel(blurred_gray, cv2.CV_64F, 1, 0, ksize=3)

edges_y_sobel = cv2.Sobel(blurred_gray, cv2.CV_64F, 0, 1, ksize=3)

edges_sobel = cv2.magnitude(edges_x_sobel, edges_y_sobel)

# Apply Canny edge detection

edges_canny = cv2.Canny(blurred_gray, 100, 200)

# Apply Laplacian edge detection on blurred image

edges_laplacian = cv2.Laplacian(blurred_gray, cv2.CV_64F, ksize=3)

# Display original and edge-detected images

plt.figure(figsize=(18, 12))

plt.subplot(231), plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)), plt.title('Original Image')

plt.subplot(232), plt.imshow(edges_sobel, cmap='gray'), plt.title('Sobel Edge Detection')

plt.subplot(233), plt.imshow(edges_canny, cmap='gray'), plt.title('Canny Edge Detection')

plt.subplot(234), plt.imshow(edges_laplacian, cmap='gray'), plt.title('Laplacian Edge Detection')

plt.show()

import cv2

import numpy as np

from matplotlib import pyplot as plt

# Load sample image (you can replace 'sample_image.jpg' with your image path)

image_path = '/content/msd.jpg'

img = cv2.imread(image_path, cv2.IMREAD_COLOR)

# Convert image to grayscale

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply Sobel edge detection

edges_x_sobel = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)

edges_y_sobel = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)

edges_sobel = cv2.magnitude(edges_x_sobel, edges_y_sobel)

# Apply Canny edge detection

edges_canny = cv2.Canny(gray, 100, 200)

# Apply Laplacian edge detection

edges_laplacian = cv2.Laplacian(gray, cv2.CV_64F, ksize=3)

# Display original and edge-detected images

plt.figure(figsize=(18, 12))

plt.subplot(231), plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)), plt.title('Original Image')

plt.subplot(232), plt.imshow(edges_sobel, cmap='gray'), plt.title('Sobel Edge Detection')

plt.subplot(233), plt.imshow(edges_canny, cmap='gray'), plt.title('Canny Edge Detection')

plt.subplot(234), plt.imshow(edges_laplacian, cmap='gray'), plt.title('Laplacian Edge Detection')

plt.show()

